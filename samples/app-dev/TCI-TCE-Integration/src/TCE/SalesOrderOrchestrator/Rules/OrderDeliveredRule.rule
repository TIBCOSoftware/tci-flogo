/**
 * @description 
 * @author Marks-MacBook-Pro-8.local
 */
rule Rules.OrderDeliveredRule {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		
		Events.OrderDeliveredEvent orderDeliveredEvent;
	}
	when {
		
	}
	then {

		System.debugOut(">>>> OrderDeliveredRule.rule - Order Delivered Rule fired");
		
		String payload = orderDeliveredEvent@payload;
		
		System.debugOut("#### OrderDeliveredRule.rule - Received Order Delivered Event with payload - " + payload);
		
		// Parse Order JSON
		Object parsedJSONNode = JSON.parseJSON(payload);

			
		String orderId = null;
		String customerId = null;
		String status = null;
				
		if (parsedJSONNode != null) {

			Object orderIdNode = JSON.findNode(parsedJSONNode, "order_id");
			if (JSON.isValueNode(orderIdNode)) {
				orderId = JSON.getTextValue(orderIdNode);
			}
			
			Object customerIdNode = JSON.findNode(parsedJSONNode, "customer_id");
			if (JSON.isValueNode(customerIdNode)) {
				customerId = JSON.getTextValue(customerIdNode);
			}
			
			Object statusNode = JSON.findNode(parsedJSONNode, "status");
			if (JSON.isValueNode(statusNode)) {
				status = JSON.getTextValue(statusNode);
			}	
		}


	
		System.debugOut("#### OrderDeliveredRule.rule - ORDER "+orderId+" DELIVERY STATUS = " + status);
		

		// Get Order Concept from Working Memory
		Concepts.Order orderConcept = Instance.getByExtIdByUri(orderId,"/Concepts/Order");	
		orderConcept.state = "COMPLETED";
		
		System.debugOut("#### ORDER STATE = " + orderConcept.state);

		
		
		// Tidy up
		
		// Delete Order Concept - Probably don't want to remove order concept in real-life
		Instance.deleteInstance(orderConcept);
		
		// Consume Event
		Event.consumeEvent(orderDeliveredEvent);
			
		// Remove order from in-flight
		Concept c = Instance.getByExtIdByUri(orderId,"/Concepts/InFlightOrders");
		Instance.deleteInstance(c);
		
		

					
	}
}