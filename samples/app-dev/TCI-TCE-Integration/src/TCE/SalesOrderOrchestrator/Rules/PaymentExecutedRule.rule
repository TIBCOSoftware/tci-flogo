/**
 * @description 
 * @author Marks-MacBook-Pro-8.local
 */
rule Rules.PaymentExecutedRule {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		
		Events.PaymentExecutedEvent paymentExecutedEvent;


	}
	when {
		
	}
	then {
		
		
		
		// This rule is fired when an PaymentExecutedEvent is received 
		// 
		// The purpose of the rule is to calculate the Order Amount and fire a Payment Event
		// The Payment Event is sent to its default destination (/Channels/Payment/ExecutePayment) and is outbound via TCM
		
	
		System.debugOut(">>>> PaymentExecuteRule.rule - Payment Executed Rule fired");
				
		String payload = paymentExecutedEvent@payload;
		
		System.debugOut("#### PaymentExecuteRule.rule - Received Payment Executed Event with payload - " + payload);
		
		// Parse Order JSON
		Object parsedJSONNode = JSON.parseJSON(payload);

			
		String orderId = null;
		String customerId = null;
		String status = null;
				
		if (parsedJSONNode != null) {

			Object orderIdNode = JSON.findNode(parsedJSONNode, "order_id");
			if (JSON.isValueNode(orderIdNode)) {
				orderId = JSON.getTextValue(orderIdNode);
			}
			
			Object customerIdNode = JSON.findNode(parsedJSONNode, "customer_id");
			if (JSON.isValueNode(customerIdNode)) {
				customerId = JSON.getTextValue(customerIdNode);
			}
			
			Object statusNode = JSON.findNode(parsedJSONNode, "status");
			if (JSON.isValueNode(statusNode)) {
				status = JSON.getTextValue(statusNode);
			}	
		}


		System.debugOut("#### PaymentExecuteRule.rule - ORDER "+orderId+" PAYMENT STATUS = " + status);
			
		if (status == "SUCCESS") {
			
			System.debugOut("#### PaymentExecuteRule.rule - Payment approved for Order #" + orderId);
						
			// Get Order Concept from Working Memory
			Concepts.Order orderConcept = Instance.getByExtIdByUri(orderId,"/Concepts/Order");	
			
			System.debugOut("#### ORDER STATE = " + orderConcept.state);
			
			orderConcept.state = "PENDING_PREPARE";
			
				
			// Create Prepare Order Event	    
	    	Event prepareOrderEvent = Event.createEvent("xslt://{{/Events/PrepareOrderEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:tns=\"www.tibco.com/be/ontology/Concepts/Order\" version=\"2.0\"><xsl:param name=\"orderId\"/><xsl:param name=\"orderConcept\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><xsl:attribute name=\"extId\"><xsl:value-of select=\"$orderId\"/></xsl:attribute><payload><tns:Order><xsl:if test=\"$orderConcept/order_id\"><order_id><xsl:value-of select=\"$orderConcept/order_id\"/></order_id></xsl:if><xsl:if test=\"$orderConcept/customer_id\"><customer_id><xsl:value-of select=\"$orderConcept/customer_id\"/></customer_id></xsl:if><xsl:if test=\"$orderConcept/email\"><email><xsl:value-of select=\"$orderConcept/email\"/></email></xsl:if><xsl:copy-of select=\"$orderConcept/items\"/></tns:Order></payload></event></createEvent></xsl:template></xsl:stylesheet>");
	    
	    	// Send Event
	    	Event.sendEvent(prepareOrderEvent);
		} else {
			System.debugOut("#### PaymentExecuteRule.rule - Payment declined for Order #" + orderId);
		}
			
		Event.consumeEvent(paymentExecutedEvent);

	}
}