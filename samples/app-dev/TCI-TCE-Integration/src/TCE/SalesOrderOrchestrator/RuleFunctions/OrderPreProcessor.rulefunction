/**
 * @description The OrderPreProcessor is executed when Orders arrive on the OrderDest destination of the Order Channel
 */
void rulefunction RuleFunctions.OrderPreProcessor {
	attribute {
		validity = ACTION;
	}
	scope {

		Events.OrderEvent inboundEvent;
	}
	body {
		
		System.debugOut(">>>> Order PreProcessor fired");
		// New Order JSON payload
		String payload = inboundEvent@payload;
		System.debugOut("#### Order PreProcessor received Request with payload - " + payload);		
		
		// Create success reply event
		Events.ReplyOrderEvent outboundAcceptedEvent = Event.createEvent("xslt://{{/Events/ReplyOrderEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:tns=\"www.tibco.com/be/ontology/Events/ReplyOrderEvent\" version=\"2.0\"><xsl:template name=\"Function\" match=\"/\"><createEvent><event><payload><tns:response><status><xsl:value-of select=\"&quot;ORDER ACCEPTED&quot;\"/></status></tns:response></payload></event></createEvent></xsl:template></xsl:stylesheet>");
		Event.replyEvent(inboundEvent,outboundAcceptedEvent);
		
		
		// Parse Order JSON
		Object parsedJSONNode = JSON.parseJSON(payload);
		
		String orderId = null;
		Object orderIdNode = JSON.findNode(parsedJSONNode, "order_id");
		if (JSON.isValueNode(orderIdNode)) {
			orderId = JSON.getTextValue(orderIdNode);
			System.debugOut("Order Id - " + orderId);
		}
		
		// Is this order already in-flight?
		Concept c = Instance.getByExtIdByUri(orderId,"/Concepts/InFlightOrders");
		if (c == null) {
			Instance.createInstance("xslt://{{/Concepts/InFlightOrders}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\"><xsl:param name=\"orderId\"/><xsl:template name=\"Function\" match=\"/\"><createObject><object><order_id><xsl:value-of select=\"$orderId\"/></order_id></object></createObject></xsl:template></xsl:stylesheet>");			
		} else {
			System.debugOut("#### ORDER ALREADY IN FLIGHT");
			Event.consumeEvent(inboundEvent);
		}
	}

}