{
    "imports": [
        "github.com/project-flogo/flow",
        "github.com/tibco/flogo-general/src/app/General/activity/mapper",
        "github.com/tibco/flogo-general/src/app/General/activity/log",
        "github.com/project-flogo/contrib/activity/actreturn",
        "github.com/tibco/flogo-general/src/app/General/trigger/rest",
        "github.com/project-flogo/contrib/function/array",
        "github.com/project-flogo/contrib/function/json",
        "github.com/project-flogo/contrib/function/coerce"
    ],
    "name": "JSONExistsFunction",
    "description": " ",
    "version": "1.0.0",
    "type": "flogo:app",
    "appModel": "1.1.1",
    "tags": [],
    "triggers": [
        {
            "ref": "#rest",
            "name": "tibco-wi-rest",
            "description": "Simple REST Trigger",
            "settings": {
                "port": 9999,
                "APISpecUpdate": false,
                "swagger": "",
                "swaggerVersion": "v2",
                "apiVersion": "1.0.0",
                "secureConnection": false,
                "serverKey": "",
                "caCertificate": ""
            },
            "id": "ReceiveHTTPMessage",
            "handlers": [
                {
                    "description": "Use json.exists function to check if a key exists in given Array element or not.",
                    "settings": {
                        "Method": "GET",
                        "reqType": "application/json",
                        "Path": "/abc",
                        "OutputValidation": false
                    },
                    "action": {
                        "ref": "github.com/project-flogo/flow",
                        "settings": {
                            "flowURI": "res://flow:JsonExistsArrayElement"
                        },
                        "input": {
                            "headers": "=$.headers"
                        },
                        "output": {
                            "code": "=$.code",
                            "message": "=$.message"
                        }
                    },
                    "reply": {
                        "code": 200,
                        "configureResponseCodes": false,
                        "message": {}
                    },
                    "schemas": {
                        "reply": {
                            "responseBody": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"any\"},\"headers\":{\"type\":\"object\"}}}",
                                "fe_metadata": "{\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"any\"},\"headers\":{\"type\":\"object\"}}}"
                            }
                        },
                        "output": {
                            "headers": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}},\"required\":[]}",
                                "fe_metadata": "[{\"parameterName\":\"Accept\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Accept-Charset\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Accept-Encoding\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Content-Type\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Content-Length\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Connection\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Cookie\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Pragma\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false}]"
                            }
                        }
                    },
                    "name": "JsonExistsArrayElement"
                },
                {
                    "description": "Use json.exists function to check if a key exists in given Array element or not using iterator.",
                    "settings": {
                        "Method": "GET",
                        "reqType": "application/json",
                        "Path": "/abc",
                        "OutputValidation": false
                    },
                    "action": {
                        "ref": "github.com/project-flogo/flow",
                        "settings": {
                            "flowURI": "res://flow:JsonExistsUsingIterator"
                        },
                        "input": {
                            "headers": "=$.headers"
                        },
                        "output": {
                            "code": "=$.code",
                            "message": "=$.message"
                        }
                    },
                    "reply": {
                        "code": 200,
                        "configureResponseCodes": false,
                        "message": {}
                    },
                    "schemas": {
                        "reply": {
                            "responseBody": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"any\"},\"headers\":{\"type\":\"object\"}}}",
                                "fe_metadata": "{\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"any\"},\"headers\":{\"type\":\"object\"}}}"
                            }
                        },
                        "output": {
                            "headers": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}},\"required\":[]}",
                                "fe_metadata": "[{\"parameterName\":\"Accept\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Accept-Charset\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Accept-Encoding\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Content-Type\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Content-Length\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Connection\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Cookie\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Pragma\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false}]"
                            }
                        }
                    },
                    "name": "JsonExistsUsingIterator"
                },
                {
                    "description": "Use json.exists function to check if a key exists in given Nested Array or not.",
                    "settings": {
                        "Method": "GET",
                        "reqType": "application/json",
                        "Path": "/abc",
                        "OutputValidation": false
                    },
                    "action": {
                        "ref": "github.com/project-flogo/flow",
                        "settings": {
                            "flowURI": "res://flow:JsonExistsNestedObj"
                        },
                        "input": {
                            "headers": "=$.headers"
                        },
                        "output": {
                            "code": "=$.code",
                            "message": "=$.message"
                        }
                    },
                    "reply": {
                        "code": 200,
                        "configureResponseCodes": false,
                        "message": {}
                    },
                    "schemas": {
                        "reply": {
                            "responseBody": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"any\"},\"headers\":{\"type\":\"object\"}}}",
                                "fe_metadata": "{\"type\":\"object\",\"properties\":{\"body\":{\"type\":\"any\"},\"headers\":{\"type\":\"object\"}}}"
                            }
                        },
                        "output": {
                            "headers": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}},\"required\":[]}",
                                "fe_metadata": "[{\"parameterName\":\"Accept\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Accept-Charset\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Accept-Encoding\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Content-Type\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Content-Length\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Connection\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Cookie\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false},{\"parameterName\":\"Pragma\",\"type\":\"string\",\"repeating\":\"false\",\"required\":\"false\",\"visible\":false}]"
                            },
                            "body": {
                                "type": "json",
                                "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"books\":{\"type\":\"object\",\"properties\":{\"english\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}}}}}}}",
                                "fe_metadata": "{\n\t\"books\": {\n\t\t\"english\": {\n\t\t\t\"name\": \"\"\n\t\t}\n\t}\n}"
                            }
                        }
                    },
                    "name": "JsonExistsNestedObj"
                }
            ]
        }
    ],
    "resources": [
        {
            "id": "flow:JsonExistsArrayElement",
            "data": {
                "name": "JsonExistsArrayElement",
                "description": "Use json.exists function to check if a key exists in given Array element or not.",
                "links": [
                    {
                        "id": 1,
                        "from": "Mapper",
                        "to": "LogMessage",
                        "type": "label",
                        "label": "Mapper to LogMessage"
                    },
                    {
                        "id": 2,
                        "from": "LogMessage",
                        "to": "Return",
                        "type": "label",
                        "label": "LogMessage to Return"
                    }
                ],
                "tasks": [
                    {
                        "id": "Mapper",
                        "name": "Mapper",
                        "description": "Mapper Activity",
                        "activity": {
                            "ref": "#mapper",
                            "input": {
                                "input": {
                                    "mapping": {
                                        "store": {
                                            "book": [
                                                {
                                                    "category": "reference",
                                                    "author": "Nigel Rees",
                                                    "title": "Sayings of the Century",
                                                    "price": 8.95
                                                },
                                                {
                                                    "category": "fiction",
                                                    "author": "Evelyn Waugh",
                                                    "title": "Sword of Honour",
                                                    "price": 12.99
                                                }
                                            ],
                                            "bicycle": {
                                                "color": "red",
                                                "price": 19.95
                                            }
                                        },
                                        "expensive": 10,
                                        "emptyString": ""
                                    }
                                }
                            },
                            "schemas": {
                                "input": {
                                    "input": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"store\":{\"type\":\"object\",\"properties\":{\"book\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"category\":{\"type\":\"string\"},\"author\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"}},\"required\":[\"category\",\"author\",\"title\",\"price\"]}},\"bicycle\":{\"type\":\"object\",\"properties\":{\"color\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"}}}}},\"expensive\":{\"type\":\"number\"},\"emptyString\":{\"type\":\"string\"}}}",
                                        "fe_metadata": "{\n    \"store\": {\n        \"book\": [\n            {\n                \"category\": \"reference\",\n                \"author\": \"Nigel Rees\",\n                \"title\": \"Sayings of the Century\",\n                \"price\": 8.95\n            },\n            {\n                \"category\": \"fiction\",\n                \"author\": \"Evelyn Waugh\",\n                \"title\": \"Sword of Honour\",\n                \"price\": 12.99\n            }\n        ],\n        \"bicycle\": {\n            \"color\": \"red\",\n            \"price\": 19.95\n        }\n    },\n    \"expensive\": 10,\n\t\"emptyString\": \"\"\n}\n"
                                    }
                                },
                                "output": {
                                    "output": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"store\":{\"type\":\"object\",\"properties\":{\"book\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"category\":{\"type\":\"string\"},\"author\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"}},\"required\":[\"category\",\"author\",\"title\",\"price\"]}},\"bicycle\":{\"type\":\"object\",\"properties\":{\"color\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"}}}}},\"expensive\":{\"type\":\"number\"},\"emptyString\":{\"type\":\"string\"}}}",
                                        "fe_metadata": "{\n  \"store\": {\n    \"book\": [\n      {\n        \"category\": \"reference\",\n        \"author\": \"Nigel Rees\",\n        \"title\": \"Sayings of the Century\",\n        \"price\": 8.95\n      },\n      {\n        \"category\": \"fiction\",\n        \"author\": \"Evelyn Waugh\",\n        \"title\": \"Sword of Honour\",\n        \"price\": 12.99\n      }\n    ],\n    \"bicycle\": {\n      \"color\": \"red\",\n      \"price\": 19.95\n    }\n  },\n  \"expensive\": 10,\n  \"emptyString\": \"\"\n}"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "LogMessage",
                        "name": "LogMessage",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "INFO",
                                "flowInfo": false,
                                "message": "=coerce.toString(json.exists($activity[Mapper].output.store, \"$loop.book[?(@.price == 12.99)].price[0]\"))"
                            }
                        }
                    },
                    {
                        "id": "Return",
                        "name": "Return",
                        "description": "Simple Return Activity",
                        "activity": {
                            "ref": "#actreturn",
                            "settings": {
                                "mappings": {
                                    "code": 200,
                                    "message": "pass"
                                }
                            }
                        }
                    }
                ],
                "fe_metadata": "eyJNYXBwZXIiOnsieCI6NTEsInkiOjUxfSwiTG9nTWVzc2FnZSI6eyJ4IjoyNTIsInkiOjUwfSwiUmV0dXJuIjp7IngiOjQ1MCwieSI6NTB9fQ==",
                "metadata": {
                    "input": [
                        {
                            "name": "headers",
                            "type": "object",
                            "schema": {
                                "type": "json",
                                "value": "{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}}"
                            }
                        }
                    ],
                    "output": [
                        {
                            "name": "code",
                            "type": "integer"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "fe_metadata": {
                        "input": "{\"type\":\"object\",\"title\":\"ReceiveHTTPMessage\",\"properties\":{\"headers\":{\"type\":\"object\",\"properties\":{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}},\"required\":[]}}}",
                        "output": "{\"type\":\"object\",\"title\":\"Inputs\",\"properties\":{\"code\":{\"type\":\"integer\",\"required\":false},\"message\":{\"type\":\"string\",\"required\":false}},\"required\":[]}"
                    }
                },
                "explicitReply": true
            }
        },
        {
            "id": "flow:JsonExistsUsingIterator",
            "data": {
                "name": "JsonExistsUsingIterator",
                "description": "Use json.exists function to check if a key exists in given Array element or not using iterator.",
                "links": [
                    {
                        "id": 1,
                        "from": "Mapper",
                        "to": "LogMessage",
                        "type": "label",
                        "label": "Mapper to LogMessage"
                    },
                    {
                        "id": 2,
                        "from": "LogMessage",
                        "to": "Return",
                        "type": "label",
                        "label": "LogMessage to Return"
                    }
                ],
                "tasks": [
                    {
                        "id": "Mapper",
                        "name": "Mapper",
                        "description": "Mapper Activity",
                        "activity": {
                            "ref": "#mapper",
                            "input": {
                                "input": {
                                    "mapping": {
                                        "tibco": [
                                            {
                                                "id": 1,
                                                "name": "Max Adams",
                                                "born": "21 Oct 2001",
                                                "cars": [
                                                    {
                                                        "make": "Mercedes",
                                                        "model": "GLS"
                                                    },
                                                    {
                                                        "make": "Audi",
                                                        "model": "Q8"
                                                    }
                                                ],
                                                "favourite": {
                                                    "colour": "Blue",
                                                    "movie": "Toy Story"
                                                }
                                            },
                                            {
                                                "id": 1,
                                                "name": "Max Adams",
                                                "born": "21 Oct 2001",
                                                "cars": [
                                                    {
                                                        "make": "Mercedes",
                                                        "model": "GLS"
                                                    },
                                                    {
                                                        "make": "Audi",
                                                        "model": "Q8"
                                                    }
                                                ],
                                                "favourite": {
                                                    "colour": "Blue",
                                                    "movie": "Toy Story"
                                                }
                                            },
                                            {
                                                "id": 1,
                                                "name": "Max Adams",
                                                "born": "21 Oct 2001",
                                                "cars": [
                                                    {
                                                        "make": "Mercedes",
                                                        "model": "GLS"
                                                    },
                                                    {
                                                        "make": "Audi",
                                                        "model": "Q8"
                                                    }
                                                ],
                                                "favourite": {
                                                    "colour": "Blue",
                                                    "movie": "Toy Story"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            "schemas": {
                                "input": {
                                    "input": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"tibco\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"number\"},\"name\":{\"type\":\"string\"},\"born\":{\"type\":\"string\"},\"cars\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"make\":{\"type\":\"string\"},\"model\":{\"type\":\"string\"}},\"required\":[\"make\",\"model\"]}},\"favourite\":{\"type\":\"object\",\"properties\":{\"colour\":{\"type\":\"string\"},\"movie\":{\"type\":\"string\"}}}}}}}}",
                                        "fe_metadata": "{\"tibco\":[{\n\t\"id\": 1,\n\t\"name\": \"Max Adams\",\n\t\"born\": \"21 Oct 2001\",\n\t\"cars\": [\n\t\t{\"make\": \"Mercedes\", \"model\": \"GLS\"\t},\n\t\t{\"make\": \"Audi\", \"model\": \"Q8\" }\n\t\t],\n\t\"favourite\": { \"colour\": \"Blue\", \"movie\": \"Toy Story\" }\n}]}"
                                    }
                                },
                                "output": {
                                    "output": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"tibco\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"number\"},\"name\":{\"type\":\"string\"},\"born\":{\"type\":\"string\"},\"cars\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"make\":{\"type\":\"string\"},\"model\":{\"type\":\"string\"}},\"required\":[\"make\",\"model\"]}},\"favourite\":{\"type\":\"object\",\"properties\":{\"colour\":{\"type\":\"string\"},\"movie\":{\"type\":\"string\"}}}}}}}}",
                                        "fe_metadata": "{\n  \"tibco\": [\n    {\n      \"id\": 1,\n      \"name\": \"Max Adams\",\n      \"born\": \"21 Oct 2001\",\n      \"cars\": [\n        {\n          \"make\": \"Mercedes\",\n          \"model\": \"GLS\"\n        },\n        {\n          \"make\": \"Audi\",\n          \"model\": \"Q8\"\n        }\n      ],\n      \"favourite\": {\n        \"colour\": \"Blue\",\n        \"movie\": \"Toy Story\"\n      }\n    }\n  ]\n}"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "LogMessage",
                        "name": "LogMessage",
                        "description": "Simple Log Message Activity",
                        "type": "iterator",
                        "settings": {
                            "iterate": 2,
                            "accumulate": false
                        },
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "INFO",
                                "flowInfo": false,
                                "message": "=coerce.toString(json.exists($activity[Mapper].output.tibco[$iteration[index]], \"$loop.cars\"))"
                            }
                        }
                    },
                    {
                        "id": "Return",
                        "name": "Return",
                        "description": "Simple Return Activity",
                        "activity": {
                            "ref": "#actreturn",
                            "settings": {
                                "mappings": {
                                    "code": 200,
                                    "message": "pass"
                                }
                            }
                        }
                    }
                ],
                "fe_metadata": "eyJNYXBwZXIiOnsieCI6NTAsInkiOjQ5fSwiTG9nTWVzc2FnZSI6eyJ4IjoyNTAsInkiOjUwfSwiUmV0dXJuIjp7IngiOjQ1MCwieSI6NTB9fQ==",
                "metadata": {
                    "input": [
                        {
                            "name": "headers",
                            "type": "object",
                            "schema": {
                                "type": "json",
                                "value": "{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}}"
                            }
                        }
                    ],
                    "output": [
                        {
                            "name": "code",
                            "type": "integer"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "fe_metadata": {
                        "input": "{\"type\":\"object\",\"title\":\"ReceiveHTTPMessage\",\"properties\":{\"headers\":{\"type\":\"object\",\"properties\":{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}},\"required\":[]}}}",
                        "output": "{\"type\":\"object\",\"title\":\"Inputs\",\"properties\":{\"code\":{\"type\":\"integer\",\"required\":false},\"message\":{\"type\":\"string\",\"required\":false}},\"required\":[]}"
                    }
                },
                "explicitReply": true
            }
        },
        {
            "id": "flow:JsonExistsNestedObj",
            "data": {
                "name": "JsonExistsNestedObj",
                "description": "Use json.exists function to check if a key exists in given Nested Array or not.",
                "links": [
                    {
                        "id": 1,
                        "from": "Mapper",
                        "to": "LogMessage",
                        "type": "label",
                        "label": "Mapper to LogMessage"
                    },
                    {
                        "id": 2,
                        "from": "LogMessage",
                        "to": "Return",
                        "type": "label",
                        "label": "LogMessagetoReturn"
                    }
                ],
                "tasks": [
                    {
                        "id": "Mapper",
                        "name": "Mapper",
                        "description": "Mapper Activity",
                        "activity": {
                            "ref": "#mapper",
                            "input": {
                                "input": {
                                    "mapping": {
                                        "books": {
                                            "english": {
                                                "name": ""
                                            }
                                        }
                                    }
                                }
                            },
                            "schemas": {
                                "input": {
                                    "input": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"books\":{\"type\":\"object\",\"properties\":{\"english\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}}}}}}}",
                                        "fe_metadata": "{\n\t\"books\": {\n\t\t\"english\": {\n\n\t\t\t\"name\": \"\"\n\t\t}\n\t}\n}"
                                    }
                                },
                                "output": {
                                    "output": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"books\":{\"type\":\"object\",\"properties\":{\"english\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}}}}}}}",
                                        "fe_metadata": "{\n  \"books\": {\n    \"english\": {\n      \"name\": \"\"\n    }\n  }\n}"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "LogMessage",
                        "name": "LogMessage",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "INFO",
                                "flowInfo": false,
                                "message": "=coerce.toString(json.exists($activity[Mapper].output.books.english, \"$loop.name\"))",
                                "logLevel": ""
                            }
                        }
                    },
                    {
                        "id": "Return",
                        "name": "Return",
                        "description": "Simple Return Activity",
                        "activity": {
                            "ref": "#actreturn",
                            "settings": {
                                "mappings": {
                                    "code": 200,
                                    "message": "pass"
                                }
                            }
                        }
                    }
                ],
                "fe_metadata": "eyJNYXBwZXIiOnsieCI6NTAsInkiOjUwfSwiTG9nTWVzc2FnZSI6eyJ4IjoyNTEsInkiOjUwfSwiUmV0dXJuIjp7IngiOjQ2NSwieSI6NTF9fQ==",
                "metadata": {
                    "input": [
                        {
                            "name": "headers",
                            "type": "object",
                            "schema": {
                                "type": "json",
                                "value": "{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}}"
                            }
                        }
                    ],
                    "output": [
                        {
                            "name": "code",
                            "type": "integer"
                        },
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "fe_metadata": {
                        "input": "{\"type\":\"object\",\"title\":\"ReceiveHTTPMessage\",\"properties\":{\"headers\":{\"type\":\"object\",\"properties\":{\"Accept\":{\"type\":\"string\",\"visible\":false},\"Accept-Charset\":{\"type\":\"string\",\"visible\":false},\"Accept-Encoding\":{\"type\":\"string\",\"visible\":false},\"Content-Type\":{\"type\":\"string\",\"visible\":false},\"Content-Length\":{\"type\":\"string\",\"visible\":false},\"Connection\":{\"type\":\"string\",\"visible\":false},\"Cookie\":{\"type\":\"string\",\"visible\":false},\"Pragma\":{\"type\":\"string\",\"visible\":false}},\"required\":[]}}}",
                        "output": "{\"type\":\"object\",\"title\":\"Inputs\",\"properties\":{\"code\":{\"type\":\"integer\",\"required\":false},\"message\":{\"type\":\"string\",\"required\":false}},\"required\":[]}"
                    }
                },
                "explicitReply": true
            }
        }
    ],
    "properties": [],
    "schemas": {
        "aa": {
            "type": "avro",
            "value": "{\n   \"type\" : \"record\",\n   \"namespace\" : \"Tutorialspoint\",\n   \"name\" : \"Employee\",\n   \"fields\" : [\n      { \"name\" : \"Name\" , \"type\" : \"string\" },\n      { \"name\" : \"Age\" , \"type\" : \"int\" }\n   ]\n}",
            "fe_metadata": "{\n   \"type\" : \"record\",\n   \"namespace\" : \"Tutorialspoint\",\n   \"name\" : \"Employee\",\n   \"fields\" : [\n      { \"name\" : \"Name\" , \"type\" : \"string\" },\n      { \"name\" : \"Age\" , \"type\" : \"int\" }\n   ]\n}"
        }
    },
    "connections": {},
    "metadata": {
        "endpoints": [
            {
                "protocol": "http",
                "port": "9999",
                "spec": {
                    "name": "JSONExistsFunction",
                    "version": "1.0.0"
                },
                "title": "ReceiveHTTPMessage",
                "swagger": {
                    "swagger": "2.0",
                    "info": {
                        "title": "JSONExistsFunction",
                        "version": "1.0.0",
                        "description": "Simple REST Trigger"
                    },
                    "paths": {
                        "/abc": {
                            "get": {
                                "summary": "JsonExistsArrayElement",
                                "operationId": "get_abc",
                                "parameters": [],
                                "responses": {
                                    "200": {
                                        "description": "Rest Response",
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "description": "Use json.exists function to check if a key exists in given Array element or not."
                            }
                        }
                    },
                    "definitions": {}
                }
            }
        ],
        "flogoVersion": "2.24.0"
    },
    "contrib": "W3sicmVmIjoiZ2l0aHViLmNvbS90aWJjby9mbG9nby1nZW5lcmFsL3NyYy9hcHAvR2VuZXJhbCIsInZlcnNpb24iOiIxLjYuMCIsInRhZyI6IjEuNi4wLWIwNCIsIm5hbWUiOiJHZW5lcmFsIiwiaWQiOiJHZW5lcmFsIiwiczNsb2NhdGlvbiI6IlRpYmNvL0dlbmVyYWwiLCJpc1VzZXJFeHRlbnNpb24iOmZhbHNlfV0="
}