/**
 * @description 
 * @author Marks-MacBook-Pro-8.local
 */
rule Rules.OrderPreparedRule {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		
		Events.OrderPreparedEvent orderPreparedEvent;
	}
	when {
		
	}
	then {
		
		System.debugOut(">>>> OrderPreparedRule.rule - Order Prepared Rule fired");
		
		String payload = orderPreparedEvent@payload;
		
		System.debugOut("#### OrderPreparedRule.rule - Received Order Prepared Event with payload - " + payload);
		
		// Parse Order JSON
		Object parsedJSONNode = JSON.parseJSON(payload);

			
		String orderId = null;
		String customerId = null;
		String status = null;
				
		if (parsedJSONNode != null) {

			Object orderIdNode = JSON.findNode(parsedJSONNode, "order_id");
			if (JSON.isValueNode(orderIdNode)) {
				orderId = JSON.getTextValue(orderIdNode);
			}
			
			Object customerIdNode = JSON.findNode(parsedJSONNode, "customer_id");
			if (JSON.isValueNode(customerIdNode)) {
				customerId = JSON.getTextValue(customerIdNode);
			}
			
			Object statusNode = JSON.findNode(parsedJSONNode, "status");
			if (JSON.isValueNode(statusNode)) {
				status = JSON.getTextValue(statusNode);
			}	
		}


		System.debugOut("#### OrderPreparedRule.rule - ORDER "+orderId+" PREPARED STATUS = " + status);
		
		if (status == "SUCCESS") {
						
			// Get Order Concept from Working Memory
			Concepts.Order orderConcept = Instance.getByExtIdByUri(orderId,"/Concepts/Order");	
			
			System.debugOut("#### ORDER STATE = " + orderConcept.state);
			orderConcept.state = "PREPARE_DELIVER";
				
			// Create Deliver Order Event	    
	    	Event deliverOrderEvent = Event.createEvent("xslt://{{/Events/DeliverOrderEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:tns=\"www.tibco.com/be/ontology/Events/DeliverOrderEvent\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:tns1=\"www.tibco.com/be/ontology/Concepts/ShippingAddress\" version=\"2.0\"><xsl:param name=\"orderConcept\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><payload><tns:payload><order_id><xsl:choose><xsl:when test=\"exists($orderConcept/order_id)\"><xsl:value-of select=\"$orderConcept/order_id\"/></xsl:when><xsl:otherwise><xsl:attribute name=\"xsi:nil\">true</xsl:attribute></xsl:otherwise></xsl:choose></order_id><customer_id><xsl:choose><xsl:when test=\"exists($orderConcept/customer_id)\"><xsl:value-of select=\"$orderConcept/customer_id\"/></xsl:when><xsl:otherwise><xsl:attribute name=\"xsi:nil\">true</xsl:attribute></xsl:otherwise></xsl:choose></customer_id><email><xsl:choose><xsl:when test=\"exists($orderConcept/email)\"><xsl:value-of select=\"$orderConcept/email\"/></xsl:when><xsl:otherwise><xsl:attribute name=\"xsi:nil\">true</xsl:attribute></xsl:otherwise></xsl:choose></email><tns1:ShippingAddress><xsl:if test=\"$orderConcept/address/address1\"><address1><xsl:value-of select=\"$orderConcept/address/address1\"/></address1></xsl:if><xsl:if test=\"$orderConcept/address/address2\"><address2><xsl:value-of select=\"$orderConcept/address/address2\"/></address2></xsl:if><xsl:if test=\"$orderConcept/address/city\"><city><xsl:value-of select=\"$orderConcept/address/city\"/></city></xsl:if><xsl:if test=\"$orderConcept/address/country\"><country><xsl:value-of select=\"$orderConcept/address/country\"/></country></xsl:if><xsl:if test=\"$orderConcept/address/postcode\"><postcode><xsl:value-of select=\"$orderConcept/address/postcode\"/></postcode></xsl:if></tns1:ShippingAddress></tns:payload></payload></event></createEvent></xsl:template></xsl:stylesheet>");
	    
	    	// Send Deliver Order Event
	    	Event.sendEvent(deliverOrderEvent);
	    	
		} else {
				
			// Issue refund
			
			// Get Order Concept from Working Memory
			Concepts.Order orderConcept = Instance.getByExtIdByUri(orderId,"/Concepts/Order");	
			
							
			String orderAmount = String.valueOfDouble(RuleFunctions.CalculateOrderAmount(orderConcept));
			
			Event refundEvent = Event.createEvent("xslt://{{/Events/RefundEvent}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:tns=\"www.tibco.com/be/ontology/Events/RefundEvent\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\"><xsl:param name=\"orderConcept\"/><xsl:param name=\"orderAmount\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><payload><tns:payload><order_id><xsl:choose><xsl:when test=\"exists($orderConcept/order_id)\"><xsl:value-of select=\"$orderConcept/order_id\"/></xsl:when><xsl:otherwise><xsl:attribute name=\"xsi:nil\">true</xsl:attribute></xsl:otherwise></xsl:choose></order_id><customer_id><xsl:choose><xsl:when test=\"exists($orderConcept/customer_id)\"><xsl:value-of select=\"$orderConcept/customer_id\"/></xsl:when><xsl:otherwise><xsl:attribute name=\"xsi:nil\">true</xsl:attribute></xsl:otherwise></xsl:choose></customer_id><email><xsl:choose><xsl:when test=\"exists($orderConcept/email)\"><xsl:value-of select=\"$orderConcept/email\"/></xsl:when><xsl:otherwise><xsl:attribute name=\"xsi:nil\">true</xsl:attribute></xsl:otherwise></xsl:choose></email><amount><xsl:value-of select=\"$orderAmount\"/></amount></tns:payload></payload></event></createEvent></xsl:template></xsl:stylesheet>");
			
			// Send Refund Event
			Event.sendEvent(refundEvent);
			
			// Delete Order Concept
			Instance.deleteInstance(orderConcept);
			
					
			// Remove order from in-flight
			Concept c = Instance.getByExtIdByUri(orderId,"/Concepts/InflightOrders");
			Instance.deleteInstance(c);
			
			
		}
			
		Event.consumeEvent(orderPreparedEvent);	
		
		
	}
}