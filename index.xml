<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIBCO Cloud Integration - Flogo</title>
    <link>https://tibcosoftware.github.io/tci-flogo/</link>
    <description>Recent content on TIBCO Cloud Integration - Flogo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Apr 2016 16:50:16 +0200</lastBuildDate><atom:link href="https://tibcosoftware.github.io/tci-flogo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Layout</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/function/layout/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/function/layout/</guid>
      <description>Function layout as simple as below
Function |───functionCategoryName │ └───descriptor.json │ └───function.go │ └───go.mod </description>
    </item>
    
    <item>
      <title>Layout and Widgets</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/layout-widgets/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/layout-widgets/</guid>
      <description>Layout The layout of your folder has to follow a specific structure.
&amp;lt;category&amp;gt; ├───activity │ └───&amp;lt;activity name&amp;gt; └───connector │ └───&amp;lt;connector name&amp;gt; └───trigger | └───&amp;lt;trigger name&amp;gt; └───contribution.json The category you want your activities to be in should be the name of your top level folder. Your activities will be in separate folders under the activity folder and your connectors will be subfolders of the connector folder and the triggers will be under the trigger folder.</description>
    </item>
    
    <item>
      <title>Use Project Flogo Extension</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/use-project-flogo/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/use-project-flogo/</guid>
      <description>Leveraging the already existing activities built by the Project Flogo community is really easy! Simply zip them up and upload them to TIBCO Cloud™Integration. Let&amp;rsquo;s say that you want to use the Counter activity from the flogo-contrib repository on GitHub. We&amp;rsquo;ll walk you through the steps to use that activity
There are 2 options available for you
 Create a Zip of Counter activity Install using Counter activity ref URL  Prepare a zip First you&amp;rsquo;ll need to download or clone the repository</description>
    </item>
    
    <item>
      <title>Connection Model and Runtime</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/connection-model-runtime/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/connection-model-runtime/</guid>
      <description>Model The descriptor.json describes the model, the metadata of the connector&amp;rsquo;s connection. It describes which fields are displayed and what kind of actions are supported in the connector UI. The below code explains which fields are in the JSON document as well as what kind of values are allowed. For more samples, check out the samples section!
{ &amp;#34;name&amp;#34;: &amp;#34;tibco-sqs&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;AWS SQS Connector&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;TIBCO Software Inc.&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;flogo:connector&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.</description>
    </item>
    
    <item>
      <title>Create New Extensions</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new/</guid>
      <description>Flogo have 2 kinds of contributions
 Single Extension -&amp;gt; Most case is Project Flogo contributions which just have single activity, trigger or function. You can go to Example Category Extension -&amp;gt; Grouping several contributions into one group we call Category, We can have multiple activities, triggers or conenctions in single category. You can go to Example  </description>
    </item>
    
    <item>
      <title>Function model and runtime</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/function/function-model-runtime/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/function/function-model-runtime/</guid>
      <description>Model Function model describe as json
{ &amp;#34;name&amp;#34;: &amp;#34;json&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;flogo:function&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;0.10.0&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Json Functions&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Json Functions&amp;#34;, &amp;#34;homepage&amp;#34;: &amp;#34;https://github.com/prject-flogo/contrib/tree/master/function/json&amp;#34;, &amp;#34;functions&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;path&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Use JSONPath expression to get value from JSON object. Refer https://github.com/oliveagle/jsonpath for expression format.&amp;#34;, &amp;#34;example&amp;#34;: &amp;#34;json.path(\&amp;#34;$.key\&amp;#34;,$activity[xxx].data) =&amp;gt; value&amp;#34;, &amp;#34;args&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;path&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;string&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;object&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;any&amp;#34; } ], &amp;#34;return&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;any&amp;#34; } } ] } Note
 The suffix of module name in go.</description>
    </item>
    
    <item>
      <title>Import Template</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/import-template/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/import-template/</guid>
      <description>Import Template We already have an working simple template which can guide you how to develop extensions
 Download Extension Template create dir under your gopath mkdir -p ${GOPATH}/src/github.com/tibco/  Copy the template.zip into {GOPATH}/src/github.com/tibco/ Unzip the folder Now you will see we have an sample connector placed under your folder. the category of the connector is Template All extension related code under ${GOPATH}/src/github.com/tibco/Template/src/app/Template  Now we need setting up runtime and design time SDK</description>
    </item>
    
    <item>
      <title>Import Template</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/function/import-template/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/function/import-template/</guid>
      <description>Import Template We already have an working simple template which can guide you how to develop extensions
 Download Function Template Copy the template.zip into your GOPATH dir that created at Here Unzip the folder Now you will see we have an sample function placed under your folder. the category of the connector is math All function related code under ${GOPATH}/src/github.com/tibco/function/math/  Now we need setting up runtime code
 Creating folder structure under your GOPATH directory, ${GOPATH}/src/github.</description>
    </item>
    
    <item>
      <title>Activity Model and Runtime</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/activity-model-runtime/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/activity-model-runtime/</guid>
      <description>Model The descriptor.json describes the model, the metadata, of the activity. It describes, among other things, what the input and outputs are, who built it and which version you&amp;rsquo;re using. The below code explains which fields are in the JSON document as well as what kind of values are allowed. For more samples, check out the samples section!
{ &amp;#34;name&amp;#34;: &amp;#34;sqssendmessage&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;author&amp;#34;: &amp;#34;TIBCO Software Inc.&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;flogo:activity&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;Send SQS Message&amp;#34;, &amp;#34;display&amp;#34;: { &amp;#34;category&amp;#34;: &amp;#34;AWSSQS&amp;#34;, &amp;#34;visible&amp;#34;: true, &amp;#34;smallIcon&amp;#34;: &amp;#34;sqssendmessage.</description>
    </item>
    
    <item>
      <title>Edit Connection</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/changes-connection/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/changes-connection/</guid>
      <description>Connection Now let&amp;rsquo;s go to connection folder ${GOPATH}/src/github.com/tibco/Template/src/app/Template
 connector.js -&amp;gt; Model file which has all fields and actions connection.go -&amp;gt; Connection runtime code connection.module.ts -&amp;gt; UI module code connection.handle.ts -&amp;gt; UI contribution handle code  Edit  Add/Edit/Delete fields in connector.json base on connection requirements. If #1 fields requires for runtime, you have to expose connection struct. If you need add fields validation or dynamically change the field value, please add to connection.</description>
    </item>
    
    <item>
      <title>Edit Template</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/function/changes-function/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/function/changes-function/</guid>
      <description>Function Now let&amp;rsquo;s go to function folder ${GOPATH}/src/github.com/tibco/function/math/
 description.json -&amp;gt; Description file which describe all function and it&amp;rsquo;s arguments math.go -&amp;gt; Runtime code go.mod -&amp;gt; Go runtime depedences file, the mod name must suffix with function category name  Edit  descriptor.json for only UI. we need make sure that all argument list in descriptor must match the argument define in runtime. Adding more functions under math category.  </description>
    </item>
    
    <item>
      <title>Edit Activity</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/changes-activity/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/changes-activity/</guid>
      <description>Activity Now let&amp;rsquo;s go to activity folder ${GOPATH}/src/github.com/tibco/Template/src/app/Template/activity/act1
 descriptor.json -&amp;gt; Model file which has all fields activity.go -&amp;gt; Activity runtime code metadata.go -&amp;gt; Activity runtime module code,which has all field in activity.json. You can keep this file or move all code into activity.go. it&amp;rsquo;s upto you. activity_test.go -&amp;gt; Activity runtime testing code act1.module.ts -&amp;gt; UI module code act1Handler.ts -&amp;gt; UI contribution handle code  Edit  Add/Edit/Delete fields in activity.</description>
    </item>
    
    <item>
      <title>Edit Trigger</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/changes-trigger/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/changes-trigger/</guid>
      <description>Trigger Now let&amp;rsquo;s go to trigger folder ${GOPATH}/src/github.com/tibco/Template/src/app/Template/trigger/trigger1
 descriptor.json -&amp;gt; Model file which has all fields for the trigger trigger.go -&amp;gt; Activity runtime code metadata.go -&amp;gt; Activity runtime module code,which has all field in activity.json. You can keep this file or move all code into activity.go. it&amp;rsquo;s upto you. trigger_test.go -&amp;gt; Activity runtime testing code trigger1.module.ts -&amp;gt; UI module code trigger1Handler.ts -&amp;gt; UI contribution handle code  Edit  Add/Edit/Delete fields in activity.</description>
    </item>
    
    <item>
      <title>Trigger Model and Runtime</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/trigger-model-runtime/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/understanding-of-category/extension/trigger-model-runtime/</guid>
      <description>Model The trigger.json file describes the model, the metadata, of the trigger. It describes, among other things, what the input and outputs are, who built it and which version you&amp;rsquo;re using. Every trigger contribution must define its model in trigger.json file.This model is shared by both UI and runtime. The trigger model contains following parts:
Trigger JSON sections  settings - Zero or more fields that contribute to the trigger configuration.</description>
    </item>
    
    <item>
      <title>Useful UI utils Method</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/utils/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/prerequisites/create-new-category/building-your-own-category/extension/utils/</guid>
      <description>Check if environment is Flogo Enterprise or TCI Cloud Intergration  WiContributionUtils.getAppConfig(this.http) .subscribe(data =&amp;gt; { if (data.deployment === APP_DEPLOYMENT.ON_PREMISE) { console.log(&amp;#34;This is FE env&amp;#34;) }else { console.log(&amp;#34;This is TCI env&amp;#34;) } });  Sending request  Send request from our backend to avoid the site cors issue. You can also refer to design time SDK WiProxyCORSUtils of app/contrib/wi-contrib.d.ts/ It does support most cases of HTTP request, you can specify method and adding query parameter or headers.</description>
    </item>
    
    <item>
      <title>Using Goland</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/dev-environment/intellij-webstorm/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/dev-environment/intellij-webstorm/</guid>
      <description>To use Golandas your IDE to develop extensions for TIBCO Cloud™Integration - Flogo®or TIBCO Flogo®Enterprise, you can install a few extensions to make your life easier.
  Goland native supports Go.
  Install plugins for typescript. You can install Angular and Angular JS plugins from Goland Marketpace.
  </description>
    </item>
    
    <item>
      <title>Using VS Code</title>
      <link>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/dev-environment/vscode/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://tibcosoftware.github.io/tci-flogo/building-extensions/getting-started/dev-environment/vscode/</guid>
      <description>To use Microsoft Visual Studio Code as your IDE to develop extensions for TIBCO Cloud™Integration - Flogo®orTIBCO Flogo®Enterprise you can install a few extensions to make your life easier.
 Install the Go extension from the extensions marketplace in Visual Studio Code.    Visual Studio Code uses the variables set on your machine and will ask you to install an additional set of analysis tools. These tools make developing Go projects in VSCode a lot easier.</description>
    </item>
    
  </channel>
</rss>
